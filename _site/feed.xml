<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" /><updated>2019-07-13T15:59:48+05:30</updated><id>http://localhost:4000/blog/feed.xml</id><title type="html">Yash Kumar Verma</title><subtitle>My Experiments with &lt; / &gt;</subtitle><entry><title type="html">How to Connect to VIT Campus Wifi (for freshers)</title><link href="http://localhost:4000/blog/How-to-connect-to-Campus-Wifi-(for-freshers)/" rel="alternate" type="text/html" title="How to Connect to VIT Campus Wifi (for freshers)" /><published>2019-07-13T00:00:00+05:30</published><updated>2019-07-13T00:00:00+05:30</updated><id>http://localhost:4000/blog/How%20to%20connect%20to%20Campus%20Wifi%20(for%20freshers)</id><content type="html" xml:base="http://localhost:4000/blog/How-to-connect-to-Campus-Wifi-(for-freshers)/">&lt;p&gt;Hello there ! fellow freshers. Yup. I’m a fresher as well! and just like me, most of you all would be just as frustrated regarding the condition of the cellular network in the campus area. The icing on the cake is that we don’t have access to the campus wifi as well! (not till I’m drafting)&lt;/p&gt;

&lt;p&gt;So hold onto your seats and get ready for this. Let’s conquer the WIFI !!!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;step-1&quot;&gt;Step 1&lt;/h1&gt;

&lt;p&gt;Step one. &lt;a href=&quot;http://122.15.77.132/vitnewregistration&quot;&gt;Visit this link&lt;/a&gt;  on your own network. (&lt;strong&gt;&lt;em&gt;repeat, on your own network. NOT ON WIFI.&lt;/em&gt;&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./../assets/how-to-connect-to-campus-wifi/homepage.png&quot; alt=&quot;Login Page&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;step-2&quot;&gt;Step 2&lt;/h1&gt;
&lt;p&gt;Step two. Fill in the details. You can get your email credentials in the VTOP profile. Next, log into your email and get the wifi credentials. From your email, note down the password along with your registration number.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./../assets/how-to-connect-to-campus-wifi/email.png&quot; alt=&quot;Email&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;step-3&quot;&gt;Step 3&lt;/h1&gt;
&lt;p&gt;Step three. Connect to any open campus wifi wherever it’s available. (can’t help it if your hostels don’t have it open yet 🤣 ). Head over to Sign-In, then fill the details.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./../assets/how-to-connect-to-campus-wifi/login.png&quot; alt=&quot;Login&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;step-4&quot;&gt;Step 4&lt;/h1&gt;
&lt;p&gt;Come on. That’s all 😎. There are no additional steps.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;additional-finding&quot;&gt;Additional Finding&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;If there’s a mystery bothering you that what’s the data limit, it’s &lt;strong&gt;&lt;em&gt;200 GB PER MONTH&lt;/em&gt;&lt;/strong&gt;
&lt;img src=&quot;./../assets/how-to-connect-to-campus-wifi/email-reply.png&quot; alt=&quot;Login&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’ve also noticed that we cannot connect two devices at a single time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;Thanks, folks. Share with your mates to help them enjoy as well.&lt;/p&gt;</content><author><name></name></author><summary type="html">Hello there ! fellow freshers. Yup. I’m a fresher as well! and just like me, most of you all would be just as frustrated regarding the condition of the cellular network in the campus area. The icing on the cake is that we don’t have access to the campus wifi as well! (not till I’m drafting)</summary></entry><entry><title type="html">Trying Laravel - Installation and Routes</title><link href="http://localhost:4000/blog/Trying-Laravel-Installation-and-Routes/" rel="alternate" type="text/html" title="Trying Laravel - Installation and Routes" /><published>2019-06-27T00:00:00+05:30</published><updated>2019-06-27T00:00:00+05:30</updated><id>http://localhost:4000/blog/Trying-Laravel-Installation%20and-Routes</id><content type="html" xml:base="http://localhost:4000/blog/Trying-Laravel-Installation-and-Routes/">&lt;p&gt;I have decided to try out my hands on laravel after a while. This would have two distinct advantages. One is that I will get hands-on experience about the best in class PHP framework, and other is that I can find new features to implement in Blazing.&lt;/p&gt;

&lt;p&gt;Starting with laravel was pretty tough, as I decided to not use &lt;strong&gt;&lt;em&gt;Homestead&lt;/em&gt;&lt;/strong&gt; and go through the conventional composer installation. My PHP installation missed two extensions, and installing them has not been a difficult task.&lt;/p&gt;

&lt;p&gt;Then, a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;php artisan serve&lt;/code&gt; showed me this page. 🤩
&lt;img src=&quot;./../assets/trying-laravel/helloWorld.png&quot; alt=&quot;Laravel HelloWorld&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;routing&quot;&gt;Routing&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Laravel has a vast routing mechanism. My current version of Blazing only has two &lt;strong&gt;HTTP&lt;/strong&gt; verbs, whereas Laravel has six. I don’t think adding all these verbs would benefit, comprehending the userbase and needs of beginners. After all, laravel is known for it’s learning curve and Blazing is all about the absence of the same.&lt;/p&gt;

&lt;h3 id=&quot;routematcharray-url-function&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Route::match(*array*, *url*, *function*)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Route::match is something I would like to implement in Blazing (&lt;em&gt;read my framework&lt;/em&gt;). This allows using a single route to respond to different sorts of requests. Similar is &lt;code class=&quot;highlighter-rouge&quot;&gt;Route::any(*url*)&lt;/code&gt; which responds to all types of requests.&lt;/p&gt;

&lt;h3 id=&quot;routeredirectfromtostatus&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Route::redirect(*from*,*to*,*status*)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The redirect method is used to redirect the request with a custom status code like 301 for permanent, 302 for temporary, etc. I don’t think this would be required in Blazing as a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;header()&lt;/code&gt; function can be used to perform the equivalent.&lt;/p&gt;

&lt;h3 id=&quot;routeviewurlview&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Route::view(*url*,*view*)&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Now, this is handy! In my projects, I’ve sometimes defined controllers only to load a page for the user. With this function, one can instantly load the view without requiring a controller! This is unquestionably coming to blazing.&lt;/p&gt;

&lt;h2 id=&quot;route-parameters&quot;&gt;Route Parameters&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Sometimes we will need to capture segments of the URL within your route. For example, you may need to capture a user’s ID from the URL. In such a situation, these are extraordinarily helpful and are considered one of the most important features of a framework, hence already in Blazing.&lt;/p&gt;

&lt;p&gt;Laravel defines a curly bracket syntax for variables in URLs. Something like &lt;code class=&quot;highlighter-rouge&quot;&gt;explore/user/{userId}&lt;/code&gt; would pass a variable titled &lt;code class=&quot;highlighter-rouge&quot;&gt;userId&lt;/code&gt; into the controller. In Blazing, however, there’s a diverse method. There, &lt;code class=&quot;highlighter-rouge&quot;&gt;explore/user/$userId&lt;/code&gt; would pass the userId variable into the controller. I chose to use the &lt;strong&gt;&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(dollar)&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; syntax because variables in PHP are declared using a dollar and it would be natural for lads to associate. Easy for novices 🤗&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Route parameters are always encased within {} braces and should consist of alphabetic characters, and may not contain a - character. Instead of using the - character, use an underscore (_).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’m a gratified developer saying that Blazing has no such limitation. (even a broken clock is right twice a day🤣). Variable names can contain numbers and can contain a dash(-)&lt;/p&gt;

&lt;h2 id=&quot;its-vast&quot;&gt;It’s VAST😕&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;There are many things which are not incorporated in this blog post. Things like optional parameters, regular expression constraints, global constraints, encoded forward slashes, named routes, generating URL to named routes, route groups, middlewares, namespaces, sub-domain routing, route prefixes, route name prefixes, rate limiting are left for enthusiasts. 😵&lt;/p&gt;

&lt;p&gt;Stay tuned for more posts on technology and computer science.&lt;/p&gt;</content><author><name></name></author><summary type="html">I have decided to try out my hands on laravel after a while. This would have two distinct advantages. One is that I will get hands-on experience about the best in class PHP framework, and other is that I can find new features to implement in Blazing.</summary></entry><entry><title type="html">C v/s Python - Part 1</title><link href="http://localhost:4000/blog/C-vs-Python-Part-1/" rel="alternate" type="text/html" title="C v/s Python - Part 1" /><published>2019-06-25T00:00:00+05:30</published><updated>2019-06-25T00:00:00+05:30</updated><id>http://localhost:4000/blog/C%20vs-Python%20:%20-Part-1</id><content type="html" xml:base="http://localhost:4000/blog/C-vs-Python-Part-1/">&lt;p&gt;This blog post will directly compare programs written in C and Python to perform the same task.&lt;/p&gt;

&lt;p&gt;Hello again. C has been one of the &lt;strong&gt;ancient&lt;/strong&gt; languages in computer sciences and Python is the new funky kid out there, who’s into almost everything. This post will directly compare the programs written in C and Python for the same task. So let’s get to work.&lt;/p&gt;

&lt;p&gt;The following programs are from the Book, “&lt;strong&gt;&lt;em&gt;Let Us C, by Yashavant Kanetkar&lt;/em&gt;&lt;/strong&gt;”, but modified a bit to increase the complexity. For example, removing the limit on length on input, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chapter2&lt;/strong&gt;/Problem1: Write a program to calculate the sum of digits
&lt;script src=&quot;https://gist.github.com/YashKumarVerma/e3baa45b64c43259afd6b3dc73202548.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;The following comparisons show that equivalent python programs are smaller as compared to their C counterparts. This feature is helpful for a lot of practical day programming but has a single drawback. This will be discussed in further posts. At last, have a look at this transformation. It would be unjust to call it small… it’s nothing!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chapter2&lt;/strong&gt;/Problem2: Write a program to reverse the given number
&lt;script src=&quot;https://gist.github.com/YashKumarVerma/bfd7d05c9fddc15af2773bb738db3720.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Thanks for your time. Happy coding.&lt;/p&gt;</content><author><name></name></author><summary type="html">This blog post will directly compare programs written in C and Python to perform the same task.</summary></entry><entry><title type="html">The concept of Blazing</title><link href="http://localhost:4000/blog/The-Idea-of-Blazing/" rel="alternate" type="text/html" title="The concept of Blazing" /><published>2019-06-18T00:00:00+05:30</published><updated>2019-06-18T00:00:00+05:30</updated><id>http://localhost:4000/blog/The-Idea-of-Blazing</id><content type="html" xml:base="http://localhost:4000/blog/The-Idea-of-Blazing/">&lt;p&gt;PHP, since it’s birth in 1994, has been the first choice of entrants for backend applications. Since it’s inception it has been readily supported by frameworks. With time the language evolved to become a dynamic server-side scripting language with an enormous set of features.&lt;/p&gt;

&lt;p&gt;The extent of the language is continuously rising. for instance, take the example of Facebook (Initially knows as The Facebook), The biggest, most successful and invariably, the most complex social network is built using php.&lt;/p&gt;

&lt;p&gt;Back in 2015 when I was discovering new stuff in computers and trying new languages by copy-pasting code, I had my encounter with PHP. I honestly loved it!  Since then PHP has been my core backend language, along with nodeJs for some distinct projects. Steadily as I got through the basics of PHP, I heard a captivating name &lt;strong&gt;codeigniter&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;“CodeIgniter is a php MVC framework” I read. Now there is a strange fascination about this phrase. it’s an MVC framework. I dug deeper into the documentation and Wikia, &lt;em&gt;only to know that I knew nothing&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Fast forward 2 years. Now I came to know about Laravel. Another MVC framework. I determined to get my hands into it. With all my dedication, I ventured, hard enough, got stuck too often and failed. The main concern is learning any new framework is the learning curvature. Which sometimes is too steep. Beginners should be acquainted with frameworks which are powerful, but at the same time, should have an association with the low lying apples of the language.&lt;/p&gt;

&lt;p&gt;Laravel is a magnificently written framework, but for a beginner, it’s quite difficult to follow (namespaces, class definitions and what not!). So I thought of a framework which would follow the MVC concept, be quick, have a variety of functions, easy to use and more importantly, powerful.&lt;/p&gt;

&lt;p&gt;Then, Blazing was Born.&lt;/p&gt;</content><author><name></name></author><summary type="html">PHP, since it’s birth in 1994, has been the first choice of entrants for backend applications. Since it’s inception it has been readily supported by frameworks. With time the language evolved to become a dynamic server-side scripting language with an enormous set of features.</summary></entry><entry><title type="html">Hello World ! TaDa !</title><link href="http://localhost:4000/blog/Hello-World/" rel="alternate" type="text/html" title="Hello World ! TaDa !" /><published>2019-06-16T00:00:00+05:30</published><updated>2019-06-16T00:00:00+05:30</updated><id>http://localhost:4000/blog/Hello-World</id><content type="html" xml:base="http://localhost:4000/blog/Hello-World/">&lt;p&gt;It’s going to be a long journey. So hang in tight, and enjoy the ride.&lt;/p&gt;

&lt;p&gt;This blog will be my journal for the next couple of years, and would house majority of my writings about technology. I’ve decided not to use my own blog generator (will discuss more about it someday) because I want to know more about the features that it should have. Using github pages along with jekyll will surely serve the purpose.&lt;/p&gt;

&lt;p&gt;Hope you guys will enjoy the journey.&lt;/p&gt;</content><author><name></name></author><summary type="html">It’s going to be a long journey. So hang in tight, and enjoy the ride.</summary></entry></feed>